using System;
using System.Collections.Generic;

public enum ShuffleType
{
    FisherYates,
    Riffle,
    NoShuffle
}

public class Card
{
    public string Suit { get; set; }
    public string Sign { get; set; }
    public string Name
    {
        get { return Sign + " of " + Suit; }
    }
}

public class Pack
{
    private List<Card> cards;
    private int currentCardIndex;

    public Pack()
    {
        cards = new List<Card>();
        string[] suits = new string[] { "Diamond", "Hearts", "Clubs", "Spades" };
        string[] Signs = new string[] { "Ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King" };
        foreach (string suit in suits)
        {
            foreach (string Sign in Signs)
            {
                Card card = new Card { Suit = suit, Sign = Sign };
                cards.Add(card);
            }
        }
        currentCardIndex = 0;
    }

    public bool Shuffle(ShuffleType type)
    {
        switch (type)
        {
            case ShuffleType.FisherYates:
                for (int i = cards.Count - 1; i >= 1; i--)
                {
                    int j = new Random().Next(i + 1);
                    Card temp = cards[j];
                    cards[j] = cards[i];
                    cards[i] = temp;
                }
                return true;
            case ShuffleType.Riffle:
                // Implementing type of the shuffle
                return true;
            case ShuffleType.NoShuffle:
                return true;
            default:
                return false;
        }
    }

    public Card DealCard()
    {
        if (currentCardIndex >= cards.Count)
        {
            return null;
        }
        else
        {
            Card card = cards[currentCardIndex];
            currentCardIndex++;
            return card;
        }
    }

    public List<Card> DealCards(int numCards)
    {
        List<Card> dealtCards = new List<Card>();
        for (int i = 0; i < numCards; i++)
        {
            Card card = DealCard();
            if (card == null)
            {
                break;
            }
            else
            {
                dealtCards.Add(card);
            }
        }
        return dealtCards;
    }
}
//Types of shuffling
public class Program
{
    public static void Main()
    {
        Pack pack = new Pack();
        Console.WriteLine("1 for Fisher-Yates Shuffle, \n2 for Riffle Shuffle \n3 for No Shuffle \n Enter shuffle type: ");
        int shuffleType = int.Parse(Console.ReadLine());
        if (shuffleType == 1)
        {
            pack.Shuffle(ShuffleType.FisherYates);
        }
        else if (shuffleType == 2)
        {
            pack.Shuffle(ShuffleType.Riffle);
        }
        
        else if (shuffleType == 3)
        {
            pack.Shuffle(ShuffleType.NoShuffle);
        }

        Console.WriteLine("How many cards to deal?:");
        int numCards = int.Parse(Console.ReadLine());
        List<Card> dealtCards = pack.DealCards(numCards);
        if (dealtCards.Count == 0)
        {
            Console.WriteLine("There are no cards left in the pack.");
        }
        else
        {
            Console.WriteLine("Number of dealt cards:");
            foreach (Card card in dealtCards)
            {
                Console.WriteLine(card.Name);
            }
        }
    }
}
